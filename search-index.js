var searchIndex={};
searchIndex["haybale_pitchfork"] = {"doc":"","i":[[3,"Config","haybale_pitchfork","Various settings which affect how the symbolic execution…",null,null],[12,"loop_bound","","Maximum number of times to execute any given line of LLVM…",0,null],[12,"max_callstack_depth","","Maximum callstack depth to allow when symbolically…",0,null],[12,"solver_query_timeout","","Maximum amount of time to allow for any single solver query.",0,null],[12,"null_pointer_checking","","Should we check each memory access for possible `NULL`…",0,null],[12,"concretize_memcpy_lengths","","When encountering a `memcpy`, `memset`, or `memmove` with…",0,null],[12,"max_memcpy_length","","Maximum supported length of a `memcpy`, `memset`, or…",0,null],[12,"squash_unsats","","`Error::Unsat` is an error type which is used internally,…",0,null],[12,"trust_llvm_assumes","","When encountering the `llvm.assume()` intrinsic, should we…",0,null],[12,"function_hooks","","The set of currently active function hooks; see…",0,null],[12,"callbacks","","The set of currently active callbacks; see `Callbacks` for…",0,null],[12,"initial_mem_watchpoints","","The initial memory watchpoints when a `State` is created…",0,null],[12,"demangling","","Controls the (attempted) demangling of function names in…",0,null],[12,"print_source_info","","If `true`, then `haybale` will attempt to print source…",0,null],[12,"print_module_name","","If `true`, then `haybale` will include the module name…",0,null],[3,"Project","","A `Project` is a collection of LLVM code to be explored,…",null,null],[3,"AbstractData","","An abstract description of a value: its size, whether it…",null,null],[3,"ConstantTimeResultForFunction","","Holds information about the results of a constant-time…",null,null],[12,"funcname","","Name of the toplevel function we analyzed",1,null],[12,"path_results","","the `ConstantTimeResultForPath`s for each path in that…",1,null],[12,"block_coverage","","Map from function names to statistics on the block…",1,null],[12,"error_filename","","If we logged all the detailed error messages, then this is…",1,null],[3,"PathStatistics","","Some statistics which can be computed from a…",null,null],[12,"num_ct_paths","","How many paths \"passed\", that is, had no error or…",2,null],[12,"num_ct_violations","","How many constant-time violations did we find",2,null],[12,"num_unsats","","How many Unsat errors did we find",2,null],[12,"num_loop_bound_exceeded","","How many LoopBoundExceeded errors did we find",2,null],[12,"num_null_ptr_deref","","How many NullPointerDereference errors did we find",2,null],[12,"num_function_not_found","","How many FunctionNotFound errors did we find",2,null],[12,"num_solver_errors","","How many solver errors (including timeouts) did we find",2,null],[12,"num_unsupported_instruction","","How many UnsupportedInstruction errors did we find",2,null],[12,"num_malformed_instruction","","How many MalformedInstruction errors did we find",2,null],[12,"num_unreachable_instruction","","How many UnreachableInstruction errors did we find",2,null],[12,"num_failed_resolve_fptr","","How many FailedToResolveFunctionPointer errors did we find",2,null],[12,"num_hook_retval_mismatch","","How many HookReturnValueMismatch errors did we find",2,null],[12,"num_other_errors","","How many other errors did we find",2,null],[3,"PitchforkConfig","","`pitchfork`-specific configuration options, in addition to…",null,null],[12,"keep_going","","If `true`, then even if we encounter an error or…",3,null],[12,"dump_errors","","Even if `keep_going` is set to `true`, the `Display` impl…",3,null],[12,"progress_updates","","If `true`, `pitchfork` will provide detailed progress…",3,null],[12,"debug_logging","","If `progress_updates == true`, `pitchfork` takes control…",3,null],[4,"AbstractValue","","A variety of ways to specify a numerical value, from…",null,null],[13,"ExactValue","","This exact numerical value",4,null],[13,"Range","","Any numerical value in the range (inclusive)",4,null],[13,"Unconstrained","","Any value whatsoever",4,null],[13,"Named","","A value with a (unique) name, so that it can be referenced…",4,null],[12,"name","haybale_pitchfork::AbstractValue","",4,null],[12,"value","","",4,null],[13,"EqualTo","haybale_pitchfork","A value equal to the value with the given name",4,null],[13,"SignedLessThan","","A value signed-less-than the value with the given name",4,null],[13,"SignedGreaterThan","","A value signed-greater-than the value with the given name",4,null],[13,"UnsignedLessThan","","A value unsigned-less-than the value with the given name",4,null],[13,"UnsignedGreaterThan","","A value unsigned-greater-than the value with the given name",4,null],[4,"ConstantTimeResultForPath","","Holds information about the results of a constant-time…",null,null],[13,"IsConstantTime","","",5,null],[13,"NotConstantTime","","",5,null],[12,"violation_message","haybale_pitchfork::ConstantTimeResultForPath","A `String` describing the violation found on this path.",5,null],[13,"OtherError","haybale_pitchfork","",5,null],[12,"error","haybale_pitchfork::ConstantTimeResultForPath","The `Error` encountered on this path.",5,null],[12,"full_message","","The full error message with \"rich context\" (backtrace,…",5,null],[5,"main_func","haybale_pitchfork","This function is designed to be called in your main(). It…",null,[[["f"]]]],[5,"check_for_ct_violation_in_inputs","","Checks whether a function is \"constant-time\" in its…",null,[[["str"],["config",["backend"]],["project"],["backend"],["pitchforkconfig"]],["constanttimeresultforfunction"]]],[5,"check_for_ct_violation","","Checks whether a function is \"constant-time\" in the…",null,[[["str"],["option",["vec"]],["config",["backend"]],["backend"],["vec",["abstractdata"]],["structdescriptions"],["pitchforkconfig"],["project"]],["constanttimeresultforfunction"]]],[11,"pub_i8","","an 8-bit public value",6,[[["abstractvalue"]],["self"]]],[11,"pub_i16","","a 16-bit public value",6,[[["abstractvalue"]],["self"]]],[11,"pub_i32","","a 32-bit public value",6,[[["abstractvalue"]],["self"]]],[11,"pub_i64","","a 64-bit public value",6,[[["abstractvalue"]],["self"]]],[11,"pub_integer","","a public value with the given number of bits",6,[[["abstractvalue"],["usize"]],["self"]]],[11,"sec_i8","","an 8-bit secret value",6,[[],["self"]]],[11,"sec_i16","","a 16-bit secret value",6,[[],["self"]]],[11,"sec_i32","","a 32-bit secret value",6,[[],["self"]]],[11,"sec_i64","","a 64-bit secret value",6,[[],["self"]]],[11,"sec_integer","","a secret value with the given number of bits",6,[[["usize"]],["self"]]],[11,"pub_pointer_to","","A (public) pointer to something - another value, an array,…",6,[[],["self"]]],[11,"pub_maybe_null_pointer_to","","A (public) pointer which may either point to the given…",6,[[],["self"]]],[11,"pub_pointer_to_func","","a (public) pointer to the LLVM `Function` with the given…",6,[[],["self"]]],[11,"pub_pointer_to_hook","","a (public) pointer to the hook registered for the given name",6,[[],["self"]]],[11,"pub_pointer_to_self","","A (public) pointer to this struct itself. E.g., in the C…",6,[[],["self"]]],[11,"pub_pointer_to_parent","","A (public) pointer to this struct's parent. E.g., in the C…",6,[[],["self"]]],[11,"pub_pointer_to_parent_or","","Like `pub_pointer_to_parent()`, but if the parent is not…",6,[[],["self"]]],[11,"array_of","","A (first-class) array of values",6,[[["usize"]],["self"]]],[11,"_struct","","A (first-class) structure of values",6,[[],["self"]]],[11,"default","","Just use the default structure based on the LLVM type…",6,[[],["self"]]],[11,"default_for_llvm_struct_name","","Use the default structure for the given LLVM struct name.",6,[[],["self"]]],[11,"unconstrained_pointer","","A (public) pointer which may point anywhere, including…",6,[[],["self"]]],[11,"unconstrained","","Just fill with the appropriate number of unconstrained…",6,[[],["self"]]],[11,"secret","","Fill with the appropriate number of secret bytes based on…",6,[[],["self"]]],[11,"void_override","","When C code uses `void*`, this often becomes `i8*` in…",6,[[["str"],["option",["str"]],["abstractdata"]],["self"]]],[11,"pointer_override","","Use a pointer to the given `data`, even though the LLVM…",6,[[["str"],["option",["str"]]],["self"]]],[11,"same_size_override","","Use the given `data`, even though it may not match the…",6,[[["abstractdata"]],["self"]]],[11,"with_watchpoint","","Use the given `data`, but also (during initialization) add…",6,[[],["self"]]],[18,"DEFAULT_ARRAY_LENGTH","","",6,null],[18,"POINTER_SIZE_BITS","","",6,null],[18,"OPAQUE_STRUCT_SIZE_BYTES","","",6,null],[11,"named","","",4,[[["str"],["abstractvalue"]],["self"]]],[0,"hooks","","This module contains a few simple built-in function hooks…",null,null],[5,"return_public_unconstrained","haybale_pitchfork::hooks","This hook will ignore all of the function arguments and…",null,[[["project"],["state"],["iscall"]],[["result",["returnvalue"]],["returnvalue",["bv"]]]]],[5,"return_secret","","This hook will ignore all of the function arguments and…",null,[[["project"],["state"],["iscall"]],[["result",["returnvalue"]],["returnvalue",["bv"]]]]],[5,"propagate_taint","","This hook will return a secret value if any of the…",null,[[["project"],["state"],["iscall"]],[["result",["returnvalue"]],["returnvalue",["bv"]]]]],[0,"hook_helpers","haybale_pitchfork","This module contains helper functions that may be useful…",null,null],[5,"fill_unconstrained_with_length","haybale_pitchfork::hook_helpers","Fills a buffer with unconstrained data, and also outputs…",null,[[["u32"],["string"],["either",["operand"]],["operand"],["state"]],["result"]]],[5,"fill_secret_with_length","","Fills a buffer with secret data, and also outputs the…",null,[[["state"],["u32"],["string"],["either",["operand","bv"]],["operand"],["bv"]],["result"]]],[5,"allocate_and_init_abstractdata","","Allocates space for the given `AbstractData`, initializes…",null,[[["state"],["structdescriptions"],["type"],["project"],["abstractdata"]],[["bv"],["result",["bv"]]]]],[5,"reinitialize_pointee","","Reinitializes whatever is pointed to by the given pointer,…",null,[[["state"],["structdescriptions"],["project"],["operand"],["abstractdata"]],["result"]]],[0,"secret","haybale_pitchfork","This module contains the dynamic taint-tracking layer…",null,null],[3,"BtorRef","haybale_pitchfork::secret","This wrapper around `Rc<Btor>` exists simply so we can…",null,null],[3,"Memory","","A `Memory` which tracks which of its contents are public…",null,null],[3,"Backend","","A `Backend` which performs dynamic taint tracking and…",null,null],[4,"BV","","A wrapper around `boolector::BV` which can represent…",null,null],[13,"Public","","",7,null],[13,"Secret","","`Secret` values are opaque because we don't care about…",7,null],[12,"btor","haybale_pitchfork::secret::BV","",7,null],[12,"width","","",7,null],[12,"symbol","","",7,null],[13,"PartiallySecret","haybale_pitchfork::secret","`PartiallySecret` values have some secret and some…",7,null],[12,"secret_mask","haybale_pitchfork::secret::BV","A vector the length of the `PartiallySecret` value's…",7,null],[12,"data","","A `BV`, which must have bitwidth exactly equal to the…",7,null],[12,"symbol","","",7,null],[11,"is_secret","haybale_pitchfork::secret","",7,[[["self"]],["bool"]]],[11,"as_public","","Gets the value out of a `BV::Public`, panicking if it is…",7,[[["self"]],["bv"]]],[6,"StructDescriptions","haybale_pitchfork","A map from struct name to an `AbstractData` description of…",null,null],[11,"first_ct_violation","","Return the `violation_message` for the first…",1,[[["self"]],[["str"],["option",["str"]]]]],[11,"first_error_or_violation","","Return the first `NotConstantTime` or `OtherError` result…",1,[[["self"]],[["constanttimeresultforpath"],["option",["constanttimeresultforpath"]]]]],[11,"path_statistics","","",1,[[["self"]],["pathstatistics"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","haybale_pitchfork::secret","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","haybale_pitchfork","",0,[[["self"]],["config"]]],[11,"default","","Default values for all configuration parameters.",0,[[],["config"]]],[11,"as_ref","haybale_pitchfork::secret","",9,[[["self"]],["btor"]]],[11,"from","","",9,[[["rc",["btor"]],["btor"]],["btorref"]]],[11,"clone","haybale_pitchfork","",6,[[["self"]],["abstractdata"]]],[11,"clone","","",4,[[["self"]],["abstractvalue"]]],[11,"clone","haybale_pitchfork::secret","",9,[[["self"]],["btorref"]]],[11,"clone","","",7,[[["self"]],["bv"]]],[11,"clone","","",10,[[["self"]],["memory"]]],[11,"clone","","",11,[[["self"]],["backend"]]],[11,"clone","haybale_pitchfork","",5,[[["self"]],["constanttimeresultforpath"]]],[11,"clone","","",2,[[["self"]],["pathstatistics"]]],[11,"clone","","",3,[[["self"]],["pitchforkconfig"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",6,[[["abstractdata"],["self"]],["bool"]]],[11,"ne","","",6,[[["abstractdata"],["self"]],["bool"]]],[11,"eq","","",4,[[["abstractvalue"],["self"]],["bool"]]],[11,"ne","","",4,[[["abstractvalue"],["self"]],["bool"]]],[11,"eq","haybale_pitchfork::secret","",9,[[["self"],["btorref"]],["bool"]]],[11,"ne","","",9,[[["self"],["btorref"]],["bool"]]],[11,"eq","","",7,[[["self"],["bv"]],["bool"]]],[11,"ne","","",7,[[["self"],["bv"]],["bool"]]],[11,"eq","","",10,[[["self"],["memory"]],["bool"]]],[11,"ne","","",10,[[["self"],["memory"]],["bool"]]],[11,"eq","haybale_pitchfork","",2,[[["self"],["pathstatistics"]],["bool"]]],[11,"ne","","",2,[[["self"],["pathstatistics"]],["bool"]]],[11,"deref","haybale_pitchfork::secret","",9,[[["self"]],["btor"]]],[11,"fmt","haybale_pitchfork","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","haybale_pitchfork::secret","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","haybale_pitchfork","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"new","haybale_pitchfork::secret","",9,[[],["self"]]],[11,"duplicate","","",9,[[["self"]],["self"]]],[11,"match_bv","","",9,[[["self"],["bv"]],[["option",["bv"]],["bv"]]]],[11,"match_array","","",9,[[["self"],["array"]],[["option",["array"]],["array",["rc"]]]]],[11,"new","","",7,[[["str"],["u32"],["option",["str"]],["btorref"]],["self"]]],[11,"from_bool","","",7,[[["bool"],["btorref"]],["self"]]],[11,"from_i32","","",7,[[["i32"],["u32"],["btorref"]],["self"]]],[11,"from_u32","","",7,[[["u32"],["btorref"]],["self"]]],[11,"from_i64","","",7,[[["i64"],["u32"],["btorref"]],["self"]]],[11,"from_u64","","",7,[[["u32"],["u64"],["btorref"]],["self"]]],[11,"zero","","",7,[[["u32"],["btorref"]],["self"]]],[11,"one","","",7,[[["u32"],["btorref"]],["self"]]],[11,"ones","","",7,[[["u32"],["btorref"]],["self"]]],[11,"from_binary_str","","",7,[[["str"],["btorref"]],["self"]]],[11,"from_dec_str","","",7,[[["str"],["u32"],["btorref"]],["self"]]],[11,"from_hex_str","","",7,[[["str"],["u32"],["btorref"]],["self"]]],[11,"as_binary_str","","",7,[[["self"]],[["string"],["option",["string"]]]]],[11,"as_u64","","",7,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"as_bool","","",7,[[["self"]],[["bool"],["option",["bool"]]]]],[11,"get_a_solution","","",7,[[["self"]],[["bvsolution"],["result",["bvsolution"]]]]],[11,"get_solver","","",7,[[["self"]]]],[11,"get_id","","",7,[[["self"]],["i32"]]],[11,"get_width","","",7,[[["self"]],["u32"]]],[11,"get_symbol","","",7,[[["self"]],[["str"],["option",["str"]]]]],[11,"set_symbol","","",7,[[["str"],["self"],["option",["str"]]]]],[11,"is_const","","",7,[[["self"]],["bool"]]],[11,"has_same_width","","",7,[[["self"]],["bool"]]],[11,"assert","","",7,[[["self"]],["result"]]],[11,"is_failed_assumption","","",7,[[["self"]],["bool"]]],[11,"_eq","","",7,[[["self"]],["self"]]],[11,"_ne","","",7,[[["self"]],["self"]]],[11,"add","","",7,[[["self"]],["self"]]],[11,"sub","","",7,[[["self"]],["self"]]],[11,"mul","","",7,[[["self"]],["self"]]],[11,"udiv","","",7,[[["self"]],["self"]]],[11,"sdiv","","",7,[[["self"]],["self"]]],[11,"urem","","",7,[[["self"]],["self"]]],[11,"srem","","",7,[[["self"]],["self"]]],[11,"smod","","",7,[[["self"]],["self"]]],[11,"inc","","",7,[[["self"]],["self"]]],[11,"dec","","",7,[[["self"]],["self"]]],[11,"neg","","",7,[[["self"]],["self"]]],[11,"uaddo","","",7,[[["self"]],["self"]]],[11,"saddo","","",7,[[["self"]],["self"]]],[11,"usubo","","",7,[[["self"]],["self"]]],[11,"ssubo","","",7,[[["self"]],["self"]]],[11,"umulo","","",7,[[["self"]],["self"]]],[11,"smulo","","",7,[[["self"]],["self"]]],[11,"sdivo","","",7,[[["self"]],["self"]]],[11,"not","","",7,[[["self"]],["self"]]],[11,"and","","",7,[[["self"]],["self"]]],[11,"or","","",7,[[["self"]],["self"]]],[11,"xor","","",7,[[["self"]],["self"]]],[11,"nand","","",7,[[["self"]],["self"]]],[11,"nor","","",7,[[["self"]],["self"]]],[11,"xnor","","",7,[[["self"]],["self"]]],[11,"sll","","",7,[[["self"]],["self"]]],[11,"srl","","",7,[[["self"]],["self"]]],[11,"sra","","",7,[[["self"]],["self"]]],[11,"rol","","",7,[[["self"]],["self"]]],[11,"ror","","",7,[[["self"]],["self"]]],[11,"redand","","",7,[[["self"]],["self"]]],[11,"redor","","",7,[[["self"]],["self"]]],[11,"redxor","","",7,[[["self"]],["self"]]],[11,"ugt","","",7,[[["self"]],["self"]]],[11,"ugte","","",7,[[["self"]],["self"]]],[11,"sgt","","",7,[[["self"]],["self"]]],[11,"sgte","","",7,[[["self"]],["self"]]],[11,"ult","","",7,[[["self"]],["self"]]],[11,"ulte","","",7,[[["self"]],["self"]]],[11,"slt","","",7,[[["self"]],["self"]]],[11,"slte","","",7,[[["self"]],["self"]]],[11,"uadds","","",7,[[["self"]],["self"]]],[11,"sadds","","",7,[[["self"]],["self"]]],[11,"usubs","","",7,[[["self"]],["self"]]],[11,"ssubs","","",7,[[["self"]],["self"]]],[11,"zext","","",7,[[["u32"],["self"]],["self"]]],[11,"sext","","",7,[[["u32"],["self"]],["self"]]],[11,"slice","","",7,[[["u32"],["self"]],["self"]]],[11,"concat","","",7,[[["self"]],["self"]]],[11,"repeat","","",7,[[["u32"],["self"]],["self"]]],[11,"iff","","",7,[[["self"]],["self"]]],[11,"implies","","",7,[[["self"]],["self"]]],[11,"cond_bv","","",7,[[["self"]],["self"]]],[11,"new_uninitialized","","",10,[[["str"],["btorref"],["option",["str"]],["bool"]],["self"]]],[11,"new_zero_initialized","","",10,[[["str"],["btorref"],["option",["str"]],["bool"]],["self"]]],[11,"read","","",10,[[["u32"],["self"]],["result"]]],[11,"write","","",10,[[["self"]],["result"]]],[11,"get_solver","","",10,[[["self"]],["btorref"]]],[11,"change_solver","","",10,[[["self"],["btorref"]]]],[11,"new","haybale_pitchfork","Creates a new `Config` with defaults for all the options,…",0,[[],["config"]]],[11,"from_bc_path","","Construct a new `Project` from a path to an LLVM bitcode…",8,[[],[["string"],["result",["project","string"]],["project"]]]],[11,"from_bc_paths","","Construct a new `Project` from multiple LLVM bitcode files",8,[[],[["string"],["result",["project","string"]],["project"]]]],[11,"from_bc_dir","","Construct a new `Project` from a path to a directory…",8,[[["str"]],[["error"],["project"],["result",["project","error"]]]]],[11,"from_bc_dir_with_blacklist","","Construct a new `Project` from a path to a directory…",8,[[["str"]],[["error"],["project"],["result",["project","error"]]]]],[11,"add_bc_path","","Add the code in the given LLVM bitcode file to the `Project`",8,[[["self"]],[["result",["string"]],["string"]]]],[11,"add_bc_dir","","Add the code in the given directory to the `Project`. See…",8,[[["self"],["str"]],[["error"],["result",["error"]]]]],[11,"add_bc_dir_with_blacklist","","Add the code in the given directory, except for…",8,[[["str"],["self"]],[["error"],["result",["error"]]]]],[11,"all_functions","","Iterate over all `Function`s in the `Project`. Gives pairs…",8,[[["self"]]]],[11,"all_global_vars","","Iterate over all `GlobalVariable`s in the `Project`. Gives…",8,[[["self"]]]],[11,"all_global_aliases","","Iterate over all `GlobalAlias`es in the `Project`. Gives…",8,[[["self"]]]],[11,"all_named_struct_types","","Iterate over all named struct types in the `Project`.…",8,[[["self"]]]],[11,"active_module_names","","Get the names of the LLVM modules which have been parsed…",8,[[["self"]]]],[11,"get_func_by_name","","Search the project for a function with the given name. If…",8,[[["str"],["self"]],["option"]]],[11,"get_named_struct_type_by_name","","Search the project for a named struct type with the given…",8,[[["str"],["self"]],["option"]]],[11,"get_inner_struct_type_from_named","","Given a `NamedStructType`, get the `StructType`…",8,[[["type"],["self"]],[["arc",["rwlock"]],["option",["arc"]]]]]],"p":[[3,"Config"],[3,"ConstantTimeResultForFunction"],[3,"PathStatistics"],[3,"PitchforkConfig"],[4,"AbstractValue"],[4,"ConstantTimeResultForPath"],[3,"AbstractData"],[4,"BV"],[3,"Project"],[3,"BtorRef"],[3,"Memory"],[3,"Backend"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);